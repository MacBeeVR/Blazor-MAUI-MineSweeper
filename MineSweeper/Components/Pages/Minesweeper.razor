@page "/game/{gridSize:int}/{minePercentage:int}/{easyMode:bool}"
@inject NavigationManager   _NavManager
@inject IGameManager        _GameManager

@if (_GameManager.GetInitialized())
{
    <div class="d-flex flex-column justify-content-center align-items-center w-100 h-100">
        <div class="d-flex flex-column justify-content-center align-items-center">
            @for (var y = 0; y < GridSize; y++)
            {
                <div class="d-flex flex-row justify-content-center align-items-center top-50 bottom-50">
                    @for (var x = 0; x < GridSize; x++)
                    {
                        var data = _GameManager.GetCell(x, y);
                        <MineSweeperCell @ref=_Cell Data="data" OnClick="(evt) => OnCellClicked(data)" />
                    }
                </div>
            }
        </div>

        <div class="d-flex flex-row justify-content-center align-items-center w-100 mt-3">
            <button class="btn btn-primary" @onclick=OnReturnButtonClicked>Quit</button>
        </div>
    </div>

    <Dialog Title="Game Over!" Opened="_GameManager.GetGameOver()">
        <BodyContent>
            @{ var endGameText = _GameManager.GetGameWon() ? "You Win!" : "You Lose!"; }
            <p class="d-flex flex-column justify-content-center align-items-center">@endGameText</p>
        </BodyContent>
        <FooterContent>
            <div class="d-flex flex-row justify-content-center align-items-center">
                <button class="btn btn-primary m-3"     @onclick=OnReturnButtonClicked  >Return </button>
                <button class="btn btn-secondary"       @onclick=OnRetryButtonClicked   >Retry  </button>
            </div>
        </FooterContent>
    </Dialog>
}

@code {
    [Parameter] public int  GridSize            { get; set; }
    [Parameter] public int  MinePercentage      { get; set; }
    [Parameter] public bool EasyMode            { get; set; }

    private Dictionary<CellData, MineSweeperCell>   _Cells = new();
    public  MineSweeperCell                         _Cell { set => _Cells.Add(value.Data, value); }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _GameManager.InitializeGame(GridSize, MinePercentage);
            StateHasChanged();
        }
    }

    #region Click Events
    private void OnReturnButtonClicked()
        => _NavManager.NavigateTo("/");

    /// <summary>
    /// Cell Clicked Event Handler
    /// </summary>
    /// <param name="cell">
    /// The Data for the Cell Clicked
    /// </param>
    private void OnCellClicked(CellData cell)
        => ClickCell(_Cells[cell]);

    // Handles Clicking and Selecting Cells and Neighbor Cells (For Easy Mode)
    private void ClickCell(MineSweeperCell cell)
    {
        if (cell is not null)
        {
            cell.ClickCell();
            _GameManager.SelectCell(cell.Data);

            if (EasyMode && !cell.Data.HasMine && cell.Data.NeighborMineCount == 0)
            {
                var pos       = cell.Data.Position;
                var neighbors = new CellData[8]
                {
                    _GameManager.GetCell(pos.X - 1, pos.Y - 1),
                    _GameManager.GetCell(pos.X    , pos.Y - 1),
                    _GameManager.GetCell(pos.X + 1, pos.Y - 1),
                    _GameManager.GetCell(pos.X - 1, pos.Y    ),
                    _GameManager.GetCell(pos.X + 1, pos.Y    ),
                    _GameManager.GetCell(pos.X - 1, pos.Y + 1),
                    _GameManager.GetCell(pos.X    , pos.Y + 1),
                    _GameManager.GetCell(pos.X + 1, pos.Y + 1)
                };

                for (var i = 0; i < 8; i++)
                {
                    if (neighbors[i] is not null)
                    {
                        var neighborCell = _Cells[neighbors[i]];
                        if (!neighborCell.WasClicked)
                            ClickCell(neighborCell);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Restart Game Event Handler
    /// </summary>
    private async void OnRetryButtonClicked()
    {
        var gameStateTask = _GameManager.ResetGameStateAsync();
        StateHasChanged();
        await gameStateTask;
        StateHasChanged();
    }

    #endregion
}
